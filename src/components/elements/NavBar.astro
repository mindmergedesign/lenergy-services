---
// Packages
import { AlignJustify, X } from 'lucide-astro'

// Components
import Logo from '@/components/elements/Logo.astro'
import navItems from '@/components/elements/navItems'

// Misc
const { pathname, ...rest } = Astro.props
---

<nav class="w-full">
	<div class="mobile-menu-container">
		<div class="flex justify-between">
			<div class="flex w-full justify-between">
				<div class="block w-48 self-center py-3 md:w-64">
					<a href="/" class="w-full text-white">
						<Logo class="logo text-white" />
					</a>
				</div>
				<div class="hidden w-full justify-end sm:ml-6 sm:flex sm:space-x-3">
					{
						navItems
							.map(({ itemName, itemUrl }) => (
								<a
									href={itemUrl}
									class={
										pathname === itemUrl || (itemUrl !== '/' && pathname.startsWith(itemUrl))
											? 'active relative inline-flex cursor-pointer items-center px-3 pt-1 font-medium text-white transition-all ease-in-out before:absolute before:bottom-0 before:left-[50%] before:h-[2px] before:w-0 before:origin-center before:bg-gray-400 before:transition-[width] before:duration-700 before:ease-in-out after:absolute after:right-[50%] after:bottom-0 after:h-[2px] after:w-0 after:origin-center after:bg-gray-400 after:transition-[width] after:duration-700 after:ease-in-out hover:text-white hover:before:w-[50%] hover:after:w-[50%]'
											: 'relative inline-flex cursor-pointer items-center px-3 pt-1 font-medium text-white transition-all ease-in-out before:absolute before:bottom-0 before:left-[50%] before:h-[2px] before:w-0 before:origin-center before:bg-gray-400 before:transition-[width] before:duration-700 before:ease-in-out after:absolute after:right-[50%] after:bottom-0 after:h-[2px] after:w-0 after:origin-center after:bg-gray-400 after:transition-[width] after:duration-700 after:ease-in-out hover:text-white hover:before:w-[50%] hover:after:w-[50%]'
									}
								>
									{itemName}
								</a>
							))
							.slice(1)
					}
				</div>
			</div>

			<div class="-mr-2 flex items-center sm:hidden">
				{/* Mobile menu button */}
				<div
					class="hover:bg-muted/20 inline-flex items-center justify-center rounded-md p-2 focus:ring-2 focus:ring-indigo-500 focus:outline-none focus:ring-inset"
				>
					<span class="sr-only">Open main menu</span>

					<button id="mobile-menu-button" aria-label="mobile-menu" class="cursor-pointer">
						<X class="hidden text-white" id="close-icon" />
						<AlignJustify class="text-white" id="menu-icon" />
					</button>
				</div>
			</div>
		</div>

		<div class="animate-slide-down bg-muted -mx-4 hidden h-full sm:hidden" id="mobile-menu-panel">
			<div class="space-y-1 pt-2 pb-3">
				{
					navItems.map(({ itemName, itemUrl }) => (
						<a
							href={itemUrl}
							class={
								pathname === itemUrl || (itemUrl !== '/' && pathname.startsWith(itemUrl))
									? 'active border-primary text-foreground block border-l-4 py-2 pr-4 pl-3 text-base font-medium'
									: 'text-foreground block border-l-4 border-stone-600 py-2 pr-4 pl-3 text-base font-medium'
							}
						>
							{itemName}
						</a>
					))
				}
			</div>
		</div>
	</div>
</nav>

<script>
	document.addEventListener('astro:page-load', () => {
		const mobileMenuButton = document.getElementById('mobile-menu-button')
		const mobileMenuPanel = document.getElementById('mobile-menu-panel')
		const menuIcon = document.getElementById('menu-icon')
		const closeIcon = document.getElementById('close-icon')
		let isMenuOpen = false

		// Function to toggle the mobile menu
		function toggleMobileMenu() {
			isMenuOpen = !isMenuOpen

			if (isMenuOpen) {
				mobileMenuPanel.classList.remove('hidden')
				menuIcon.classList.add('hidden')
				closeIcon.classList.remove('hidden')
			} else {
				mobileMenuPanel.classList.add('hidden')
				menuIcon.classList.remove('hidden')
				closeIcon.classList.add('hidden')
			}
		}

		// Add click event listener to the mobile menu button
		mobileMenuButton.addEventListener('click', toggleMobileMenu)

		// Close the menu when clicking outside
		document.addEventListener('click', (event) => {
			const container = document.querySelector('.mobile-menu-container')

			// Check if the click was outside the mobile menu container
			if (isMenuOpen && container && !container.contains(event.target)) {
				toggleMobileMenu()
			}
		})
	})
</script>
